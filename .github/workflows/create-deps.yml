name: 'Create GO Dependency tar'

on:
  workflow_dispatch:
    inputs:
      PN:
        description: 'Package Name (i.e. net-analyzer/check_hp_firmware )'
        required: true
        default: 'net-analyzer/check_hp_firmware'
      PV:
        description: 'Ebuild Package Version (i.e. 1.3.0-r1)'
        required: true
        default: '1.3.0-r1'
      SRC_URI:
        description: 'URL of Source-Files'
        required: false
        default: ''
#        default: 'https://github.com/NETWAYS/check_hp_firmware/archive/refs/tags/v1.3.0.tar.gz'

jobs:
  find-src:
    if: github.event.inputs.SRC_URI == ''
    outputs:
      SRC_URI: ${{ steps.src_uri.outputs.SRC_URI }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/antonfischl1980/gentoo-ci:main

    steps:
    - name: 'Checkout repo'
      uses: actions/checkout@v3

    - name: 'Calculate SRC_URI'
      id: src_uri
      run: |
        mkdir -p "${{ github.event.inputs.PN }}"
        EBUILD="${{ github.event.inputs.PN }}/$(basename "${{ github.event.inputs.PN }}")-${{ github.event.inputs.PV }}.ebuild"
        if [ "${{ github.event.inputs.SRC_URI}}" == ""  ];then
          SRC_URI="$(cat "${{ github.event.inputs.PN }}/SRC_URI")"
        fi
        echo "EBUILD: ${EBUILD}"
        echo 'EAPI=8' > "${EBUILD}"
        echo "SRC_URI=\"${SRC_URI}\"" >> "${EBUILD}"
        echo 'SLOT="0"' >> "${EBUILD}"
        echo 'pkg_nofetch() {' >> "${EBUILD}"
        echo '  echo "SRC_URI: ${SRC_URI}"' >> "${EBUILD}"
        echo '}' >> "${EBUILD}"
        cat "${EBUILD}"
        echo -n "::set-output name=SRC_URI::"
        ebuild net-analyzer/check_hp_firmware/check_hp_firmware-1.3.0-r1.ebuild manifest nofetch |& grep SRC_URI | sed -E 's/^SRC_URI: //g'


  create-go-dep:
    if: ${{ always() }}
    needs: find-src
    runs-on: ubuntu-latest
    
    steps:
    - name: 'Checkout repo'
      uses: actions/checkout@v3

    - name: 'Unpack Source'
      run: |
        if [ "${{ needs.find-src.outputs.SRC_URI }}" != "" ]; then
          SRC_URI="${{ needs.find-src.outputs.SRC_URI }}"
        else
          SRC_URI="${{ github.event.inputs.SRC_URI }}"
        fi
        TAR="$(basename "${SRC_URI}")"
        wget "${SRC_URI}" -O "${TAR}"
        mkdir src
        tar --strip-components=1 -xavf "${TAR}" -C src/
        ls -laR 

    - name: Building modcache
      run: |
        export GOMODCACHE="${PWD}/go-mod"
        test -d "${GOMODCACHE}" && rm -R "${GOMODCACHE}"
        pushd src
        go mod download -modcacherw || die
        popd
        find . -maxdepth 1 -mindepth 1 -regextype posix-extended -not -regex '\./(go-mod|\.git)' -print0|xargs -r0 rm -Rv
        ls -laR

    - name: Commit and Push
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: '${{ github.event.inputs.PN }}-${{ github.event.inputs.PV }}'
        branch: '${{ github.event.inputs.PN }}'
        tagging_message: '${{ github.event.inputs.PN }}-${{ github.event.inputs.PV }}-deps'
        push_options: '--force'
        create_branch: true







